// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1alpha1/beacon_block_altair.proto

package eth

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_prysmaticlabs_eth2_types "github.com/prysmaticlabs/eth2-types"
	github_com_prysmaticlabs_go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SignedBeaconBlockAltair struct {
	Block                *BeaconBlockAltair `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Signature            []byte             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SignedBeaconBlockAltair) Reset()         { *m = SignedBeaconBlockAltair{} }
func (m *SignedBeaconBlockAltair) String() string { return proto.CompactTextString(m) }
func (*SignedBeaconBlockAltair) ProtoMessage()    {}
func (*SignedBeaconBlockAltair) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0a4a309078ed83, []int{0}
}
func (m *SignedBeaconBlockAltair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedBeaconBlockAltair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedBeaconBlockAltair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedBeaconBlockAltair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedBeaconBlockAltair.Merge(m, src)
}
func (m *SignedBeaconBlockAltair) XXX_Size() int {
	return m.Size()
}
func (m *SignedBeaconBlockAltair) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedBeaconBlockAltair.DiscardUnknown(m)
}

var xxx_messageInfo_SignedBeaconBlockAltair proto.InternalMessageInfo

func (m *SignedBeaconBlockAltair) GetBlock() *BeaconBlockAltair {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *SignedBeaconBlockAltair) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BeaconBlockAltair struct {
	Slot                 github_com_prysmaticlabs_eth2_types.Slot           `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	ProposerIndex        github_com_prysmaticlabs_eth2_types.ValidatorIndex `protobuf:"varint,2,opt,name=proposer_index,json=proposerIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.ValidatorIndex" json:"proposer_index,omitempty"`
	ParentRoot           []byte                                             `protobuf:"bytes,3,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty" ssz-size:"32"`
	StateRoot            []byte                                             `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty" ssz-size:"32"`
	Body                 *BeaconBlockBodyAltair                             `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *BeaconBlockAltair) Reset()         { *m = BeaconBlockAltair{} }
func (m *BeaconBlockAltair) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockAltair) ProtoMessage()    {}
func (*BeaconBlockAltair) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0a4a309078ed83, []int{1}
}
func (m *BeaconBlockAltair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconBlockAltair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconBlockAltair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconBlockAltair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockAltair.Merge(m, src)
}
func (m *BeaconBlockAltair) XXX_Size() int {
	return m.Size()
}
func (m *BeaconBlockAltair) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockAltair.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockAltair proto.InternalMessageInfo

func (m *BeaconBlockAltair) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconBlockAltair) GetProposerIndex() github_com_prysmaticlabs_eth2_types.ValidatorIndex {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

func (m *BeaconBlockAltair) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

func (m *BeaconBlockAltair) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *BeaconBlockAltair) GetBody() *BeaconBlockBodyAltair {
	if m != nil {
		return m.Body
	}
	return nil
}

type BeaconBlockBodyAltair struct {
	RandaoReveal         []byte                 `protobuf:"bytes,1,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty" ssz-size:"96"`
	Eth1Data             *Eth1Data              `protobuf:"bytes,2,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	Graffiti             []byte                 `protobuf:"bytes,3,opt,name=graffiti,proto3" json:"graffiti,omitempty" ssz-size:"32"`
	ProposerSlashings    []*ProposerSlashing    `protobuf:"bytes,4,rep,name=proposer_slashings,json=proposerSlashings,proto3" json:"proposer_slashings,omitempty" ssz-max:"16"`
	AttesterSlashings    []*AttesterSlashing    `protobuf:"bytes,5,rep,name=attester_slashings,json=attesterSlashings,proto3" json:"attester_slashings,omitempty" ssz-max:"2"`
	Attestations         []*Attestation         `protobuf:"bytes,6,rep,name=attestations,proto3" json:"attestations,omitempty" ssz-max:"128"`
	Deposits             []*Deposit             `protobuf:"bytes,7,rep,name=deposits,proto3" json:"deposits,omitempty" ssz-max:"16"`
	VoluntaryExits       []*SignedVoluntaryExit `protobuf:"bytes,8,rep,name=voluntary_exits,json=voluntaryExits,proto3" json:"voluntary_exits,omitempty" ssz-max:"16"`
	SyncAggregate        *SyncAggregate         `protobuf:"bytes,9,opt,name=sync_aggregate,json=syncAggregate,proto3" json:"sync_aggregate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BeaconBlockBodyAltair) Reset()         { *m = BeaconBlockBodyAltair{} }
func (m *BeaconBlockBodyAltair) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockBodyAltair) ProtoMessage()    {}
func (*BeaconBlockBodyAltair) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0a4a309078ed83, []int{2}
}
func (m *BeaconBlockBodyAltair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconBlockBodyAltair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconBlockBodyAltair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconBlockBodyAltair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockBodyAltair.Merge(m, src)
}
func (m *BeaconBlockBodyAltair) XXX_Size() int {
	return m.Size()
}
func (m *BeaconBlockBodyAltair) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockBodyAltair.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockBodyAltair proto.InternalMessageInfo

func (m *BeaconBlockBodyAltair) GetRandaoReveal() []byte {
	if m != nil {
		return m.RandaoReveal
	}
	return nil
}

func (m *BeaconBlockBodyAltair) GetEth1Data() *Eth1Data {
	if m != nil {
		return m.Eth1Data
	}
	return nil
}

func (m *BeaconBlockBodyAltair) GetGraffiti() []byte {
	if m != nil {
		return m.Graffiti
	}
	return nil
}

func (m *BeaconBlockBodyAltair) GetProposerSlashings() []*ProposerSlashing {
	if m != nil {
		return m.ProposerSlashings
	}
	return nil
}

func (m *BeaconBlockBodyAltair) GetAttesterSlashings() []*AttesterSlashing {
	if m != nil {
		return m.AttesterSlashings
	}
	return nil
}

func (m *BeaconBlockBodyAltair) GetAttestations() []*Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *BeaconBlockBodyAltair) GetDeposits() []*Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *BeaconBlockBodyAltair) GetVoluntaryExits() []*SignedVoluntaryExit {
	if m != nil {
		return m.VoluntaryExits
	}
	return nil
}

func (m *BeaconBlockBodyAltair) GetSyncAggregate() *SyncAggregate {
	if m != nil {
		return m.SyncAggregate
	}
	return nil
}

type SyncAggregate struct {
	SyncCommitteeBits      github_com_prysmaticlabs_go_bitfield.Bitvector1024 `protobuf:"bytes,1,opt,name=sync_committee_bits,json=syncCommitteeBits,proto3,casttype=github.com/prysmaticlabs/go-bitfield.Bitvector1024" json:"sync_committee_bits,omitempty" ssz-size:"128"`
	SyncCommitteeSignature []byte                                             `protobuf:"bytes,2,opt,name=sync_committee_signature,json=syncCommitteeSignature,proto3" json:"sync_committee_signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral   struct{}                                           `json:"-"`
	XXX_unrecognized       []byte                                             `json:"-"`
	XXX_sizecache          int32                                              `json:"-"`
}

func (m *SyncAggregate) Reset()         { *m = SyncAggregate{} }
func (m *SyncAggregate) String() string { return proto.CompactTextString(m) }
func (*SyncAggregate) ProtoMessage()    {}
func (*SyncAggregate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0a4a309078ed83, []int{3}
}
func (m *SyncAggregate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncAggregate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncAggregate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncAggregate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncAggregate.Merge(m, src)
}
func (m *SyncAggregate) XXX_Size() int {
	return m.Size()
}
func (m *SyncAggregate) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncAggregate.DiscardUnknown(m)
}

var xxx_messageInfo_SyncAggregate proto.InternalMessageInfo

func (m *SyncAggregate) GetSyncCommitteeBits() github_com_prysmaticlabs_go_bitfield.Bitvector1024 {
	if m != nil {
		return m.SyncCommitteeBits
	}
	return nil
}

func (m *SyncAggregate) GetSyncCommitteeSignature() []byte {
	if m != nil {
		return m.SyncCommitteeSignature
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedBeaconBlockAltair)(nil), "ethereum.eth.v1alpha1.SignedBeaconBlockAltair")
	proto.RegisterType((*BeaconBlockAltair)(nil), "ethereum.eth.v1alpha1.BeaconBlockAltair")
	proto.RegisterType((*BeaconBlockBodyAltair)(nil), "ethereum.eth.v1alpha1.BeaconBlockBodyAltair")
	proto.RegisterType((*SyncAggregate)(nil), "ethereum.eth.v1alpha1.SyncAggregate")
}

func init() {
	proto.RegisterFile("eth/v1alpha1/beacon_block_altair.proto", fileDescriptor_cf0a4a309078ed83)
}

var fileDescriptor_cf0a4a309078ed83 = []byte{
	// 792 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x97, 0xb7, 0xd9, 0xb2, 0x3b, 0xd9, 0x6c, 0xc9, 0xa0, 0x2d, 0xa6, 0x87, 0x78, 0x65, 0x21,
	0x88, 0x50, 0xe3, 0x34, 0x2e, 0x8a, 0xa0, 0x20, 0xd4, 0x35, 0x8d, 0x04, 0x82, 0xc3, 0xca, 0x91,
	0x2a, 0x81, 0x8a, 0xac, 0xb1, 0x3d, 0xb1, 0x47, 0x38, 0x1e, 0x6b, 0xe6, 0x25, 0x4a, 0xfa, 0x11,
	0xf8, 0x26, 0xf0, 0x49, 0x10, 0x27, 0x4e, 0x9c, 0x50, 0x84, 0xf6, 0xcc, 0x29, 0xc7, 0x9e, 0x90,
	0xc7, 0x71, 0xfe, 0xec, 0xc6, 0xa1, 0x37, 0x3f, 0xcf, 0xef, 0xcf, 0xfb, 0x33, 0x7e, 0x46, 0x1f,
	0x51, 0x88, 0xbb, 0xd3, 0x1e, 0x49, 0xb2, 0x98, 0xf4, 0xba, 0x3e, 0x25, 0x01, 0x4f, 0x3d, 0x3f,
	0xe1, 0xc1, 0xcf, 0x1e, 0x49, 0x80, 0x30, 0x61, 0x65, 0x82, 0x03, 0xc7, 0x17, 0x14, 0x62, 0x2a,
	0xe8, 0x64, 0x6c, 0x51, 0x88, 0xad, 0x92, 0xf0, 0xa8, 0x13, 0x31, 0x88, 0x27, 0xbe, 0x15, 0xf0,
	0x71, 0x37, 0xe2, 0x11, 0xef, 0x2a, 0xb4, 0x3f, 0x19, 0xa9, 0x48, 0x05, 0xea, 0xa9, 0x50, 0x79,
	0xd4, 0xda, 0x71, 0x23, 0x00, 0x54, 0x02, 0x01, 0xc6, 0xd3, 0xd5, 0xb9, 0x51, 0x99, 0x4d, 0x01,
	0x30, 0x7f, 0xd1, 0xd0, 0xfb, 0x43, 0x16, 0xa5, 0x34, 0x74, 0xd4, 0xa1, 0x93, 0x9f, 0x5d, 0xa9,
	0x44, 0xf1, 0x57, 0xe8, 0x58, 0x41, 0x75, 0xed, 0x52, 0x6b, 0xd7, 0xed, 0xb6, 0xb5, 0x37, 0x65,
	0xeb, 0x0e, 0xd1, 0x2d, 0x68, 0xb8, 0x8b, 0x4e, 0x25, 0x8b, 0x52, 0x02, 0x13, 0x41, 0xf5, 0xa3,
	0x4b, 0xad, 0x7d, 0xe6, 0x34, 0x97, 0x0b, 0xa3, 0x21, 0xe5, 0xeb, 0x8e, 0x64, 0xaf, 0xe9, 0x33,
	0xf3, 0xf3, 0xbe, 0xe9, 0x6e, 0x30, 0xe6, 0xdf, 0x47, 0xa8, 0x79, 0x37, 0x8d, 0xe7, 0xa8, 0x26,
	0x13, 0x0e, 0x2a, 0x8b, 0x9a, 0xf3, 0xf8, 0xcd, 0xc2, 0x68, 0x6f, 0x35, 0x29, 0x13, 0x73, 0x39,
	0x26, 0xc0, 0x82, 0x84, 0xf8, 0xb2, 0x4b, 0x21, 0xb6, 0x3b, 0x30, 0xcf, 0xa8, 0xb4, 0x86, 0x09,
	0x07, 0x57, 0x31, 0xf1, 0x4f, 0xe8, 0x3c, 0x13, 0x3c, 0xe3, 0x92, 0x0a, 0x8f, 0xa5, 0x21, 0x9d,
	0xa9, 0x6c, 0x6a, 0x4e, 0xff, 0xcd, 0xc2, 0xb0, 0xdf, 0x46, 0xeb, 0x25, 0x49, 0x58, 0x48, 0x80,
	0x8b, 0x6f, 0x73, 0xb6, 0xdb, 0x28, 0xd5, 0x54, 0x88, 0x6d, 0x54, 0xcf, 0x88, 0xa0, 0x29, 0x78,
	0x82, 0x73, 0xd0, 0xef, 0xed, 0xab, 0xf4, 0xa9, 0x6d, 0xba, 0xa8, 0x40, 0xb9, 0x9c, 0x03, 0x7e,
	0x82, 0x50, 0x3e, 0x29, 0x5a, 0x50, 0x6a, 0x55, 0x94, 0x53, 0x05, 0x52, 0x8c, 0xe7, 0xa8, 0xe6,
	0xf3, 0x70, 0xae, 0x1f, 0xab, 0x61, 0x3c, 0xfe, 0xff, 0x61, 0x38, 0x3c, 0x9c, 0xaf, 0x06, 0xa2,
	0x98, 0xe6, 0xbf, 0xc7, 0xe8, 0x62, 0xef, 0x39, 0xee, 0xa3, 0x86, 0x20, 0x69, 0x48, 0xb8, 0x27,
	0xe8, 0x94, 0x92, 0x44, 0xf5, 0x7a, 0xef, 0xb4, 0xce, 0x0a, 0x9c, 0xab, 0x60, 0xf8, 0x4b, 0x74,
	0x4a, 0x21, 0xee, 0x79, 0x21, 0x01, 0xa2, 0x7a, 0x5a, 0xb7, 0x8d, 0x8a, 0xc4, 0x06, 0x10, 0xf7,
	0x5e, 0x10, 0x20, 0xee, 0x09, 0x5d, 0x3d, 0xe1, 0x0e, 0x3a, 0x89, 0x04, 0x19, 0x8d, 0x18, 0xb0,
	0xea, 0xa6, 0xad, 0x21, 0x38, 0x46, 0x78, 0x3d, 0x45, 0x99, 0x10, 0x19, 0xb3, 0x34, 0x92, 0x7a,
	0xed, 0xf2, 0x5e, 0xbb, 0x6e, 0x7f, 0x5c, 0xe1, 0x7a, 0xbd, 0x22, 0x0c, 0x57, 0x78, 0xe7, 0xdd,
	0xe5, 0xc2, 0x38, 0xcb, 0x1d, 0xc6, 0x64, 0xf6, 0xcc, 0xec, 0xf5, 0x4d, 0xb7, 0x99, 0xdd, 0xc2,
	0x48, 0x1c, 0x21, 0x5c, 0x7c, 0x4a, 0x3b, 0x4e, 0xc7, 0x07, 0x9d, 0xae, 0x56, 0x84, 0xb5, 0xd3,
	0x83, 0xe5, 0xc2, 0xa8, 0xaf, 0x9d, 0x6c, 0xd3, 0x6d, 0x92, 0x5b, 0x10, 0x89, 0x7f, 0x40, 0x67,
	0x5b, 0xdf, 0xac, 0xd4, 0xef, 0x2b, 0x0b, 0xf3, 0xa0, 0x85, 0x82, 0x6e, 0x3a, 0x55, 0xd4, 0x61,
	0x7f, 0x66, 0xba, 0x3b, 0x52, 0xf8, 0x7b, 0x74, 0x12, 0xd2, 0x8c, 0x4b, 0x06, 0x52, 0x7f, 0x47,
	0xc9, 0xb6, 0x2a, 0x64, 0x5f, 0x14, 0xb0, 0x3d, 0xad, 0x59, 0x2b, 0x60, 0x8a, 0x1e, 0x4c, 0x79,
	0x32, 0x49, 0x81, 0x88, 0xb9, 0x47, 0x67, 0xb9, 0xe8, 0x89, 0x12, 0xfd, 0xa4, 0x42, 0xb4, 0xd8,
	0x29, 0x2f, 0x4b, 0xce, 0x60, 0xb6, 0xd7, 0xe0, 0x7c, 0xba, 0x0d, 0x90, 0xf8, 0x3b, 0x74, 0x2e,
	0xe7, 0x69, 0xe0, 0x91, 0x28, 0x12, 0x34, 0x22, 0x40, 0xf5, 0x53, 0x75, 0xa9, 0x3e, 0xac, 0x72,
	0x99, 0xa7, 0xc1, 0x55, 0x89, 0x75, 0x1b, 0x72, 0x3b, 0x34, 0xff, 0xd2, 0x50, 0x63, 0x07, 0x80,
	0x67, 0xe8, 0x3d, 0x25, 0x1f, 0xf0, 0xf1, 0x98, 0x01, 0x50, 0xea, 0xf9, 0x79, 0x25, 0xc5, 0x65,
	0xff, 0x66, 0xb9, 0x30, 0xce, 0x37, 0x77, 0x2f, 0x6f, 0xe9, 0xc1, 0xf5, 0x10, 0xf1, 0x8e, 0xcf,
	0x60, 0xc4, 0x68, 0x12, 0x5a, 0x0e, 0x83, 0x29, 0x0d, 0x80, 0x8b, 0xde, 0x13, 0xfb, 0x53, 0xb7,
	0x99, 0x9b, 0x7c, 0x5d, 0x7a, 0x38, 0x45, 0x61, 0xfa, 0x2d, 0xe7, 0xb7, 0xd8, 0x8c, 0x0f, 0x77,
	0x74, 0x86, 0x25, 0xc1, 0xf9, 0x55, 0xfb, 0xfd, 0xa6, 0xa5, 0xfd, 0x79, 0xd3, 0xd2, 0xfe, 0xb9,
	0x69, 0x69, 0xe8, 0x03, 0x2e, 0xa2, 0xfd, 0xfd, 0x71, 0x1e, 0xde, 0xd9, 0xa6, 0xd7, 0xf9, 0xd6,
	0xbf, 0xd6, 0x7e, 0xec, 0x1f, 0x5a, 0x7b, 0x4a, 0x89, 0x64, 0x4c, 0x05, 0xeb, 0xdf, 0xc7, 0x17,
	0x14, 0xe2, 0xdf, 0x8e, 0x2e, 0x06, 0xa5, 0xd3, 0x60, 0xcb, 0xe9, 0x8f, 0xcd, 0xfb, 0x57, 0x03,
	0x88, 0x5f, 0x95, 0xef, 0xfd, 0xfb, 0xea, 0x37, 0xf3, 0xf4, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x6d, 0xef, 0x51, 0x74, 0x17, 0x07, 0x00, 0x00,
}

func (m *SignedBeaconBlockAltair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedBeaconBlockAltair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedBeaconBlockAltair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeaconBlockAltair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconBlockAltair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconBlockAltair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParentRoot) > 0 {
		i -= len(m.ParentRoot)
		copy(dAtA[i:], m.ParentRoot)
		i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(len(m.ParentRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProposerIndex != 0 {
		i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(m.ProposerIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BeaconBlockBodyAltair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconBlockBodyAltair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconBlockBodyAltair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SyncAggregate != nil {
		{
			size, err := m.SyncAggregate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VoluntaryExits) > 0 {
		for iNdEx := len(m.VoluntaryExits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoluntaryExits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AttesterSlashings) > 0 {
		for iNdEx := len(m.AttesterSlashings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttesterSlashings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ProposerSlashings) > 0 {
		for iNdEx := len(m.ProposerSlashings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposerSlashings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Graffiti) > 0 {
		i -= len(m.Graffiti)
		copy(dAtA[i:], m.Graffiti)
		i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(len(m.Graffiti)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Eth1Data != nil {
		{
			size, err := m.Eth1Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RandaoReveal) > 0 {
		i -= len(m.RandaoReveal)
		copy(dAtA[i:], m.RandaoReveal)
		i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(len(m.RandaoReveal)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncAggregate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncAggregate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncAggregate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SyncCommitteeSignature) > 0 {
		i -= len(m.SyncCommitteeSignature)
		copy(dAtA[i:], m.SyncCommitteeSignature)
		i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(len(m.SyncCommitteeSignature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SyncCommitteeBits) > 0 {
		i -= len(m.SyncCommitteeBits)
		copy(dAtA[i:], m.SyncCommitteeBits)
		i = encodeVarintBeaconBlockAltair(dAtA, i, uint64(len(m.SyncCommitteeBits)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBeaconBlockAltair(dAtA []byte, offset int, v uint64) int {
	offset -= sovBeaconBlockAltair(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignedBeaconBlockAltair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BeaconBlockAltair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovBeaconBlockAltair(uint64(m.Slot))
	}
	if m.ProposerIndex != 0 {
		n += 1 + sovBeaconBlockAltair(uint64(m.ProposerIndex))
	}
	l = len(m.ParentRoot)
	if l > 0 {
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BeaconBlockBodyAltair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RandaoReveal)
	if l > 0 {
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	if m.Eth1Data != nil {
		l = m.Eth1Data.Size()
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	l = len(m.Graffiti)
	if l > 0 {
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	if len(m.ProposerSlashings) > 0 {
		for _, e := range m.ProposerSlashings {
			l = e.Size()
			n += 1 + l + sovBeaconBlockAltair(uint64(l))
		}
	}
	if len(m.AttesterSlashings) > 0 {
		for _, e := range m.AttesterSlashings {
			l = e.Size()
			n += 1 + l + sovBeaconBlockAltair(uint64(l))
		}
	}
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovBeaconBlockAltair(uint64(l))
		}
	}
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovBeaconBlockAltair(uint64(l))
		}
	}
	if len(m.VoluntaryExits) > 0 {
		for _, e := range m.VoluntaryExits {
			l = e.Size()
			n += 1 + l + sovBeaconBlockAltair(uint64(l))
		}
	}
	if m.SyncAggregate != nil {
		l = m.SyncAggregate.Size()
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncAggregate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SyncCommitteeBits)
	if l > 0 {
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	l = len(m.SyncCommitteeSignature)
	if l > 0 {
		n += 1 + l + sovBeaconBlockAltair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBeaconBlockAltair(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBeaconBlockAltair(x uint64) (n int) {
	return sovBeaconBlockAltair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedBeaconBlockAltair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconBlockAltair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedBeaconBlockAltair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedBeaconBlockAltair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &BeaconBlockAltair{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconBlockAltair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconBlockAltair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconBlockAltair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconBlockAltair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconBlockAltair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerIndex", wireType)
			}
			m.ProposerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerIndex |= github_com_prysmaticlabs_eth2_types.ValidatorIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRoot = append(m.ParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentRoot == nil {
				m.ParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &BeaconBlockBodyAltair{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconBlockAltair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconBlockBodyAltair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconBlockAltair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconBlockBodyAltair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconBlockBodyAltair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoReveal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandaoReveal = append(m.RandaoReveal[:0], dAtA[iNdEx:postIndex]...)
			if m.RandaoReveal == nil {
				m.RandaoReveal = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Eth1Data == nil {
				m.Eth1Data = &Eth1Data{}
			}
			if err := m.Eth1Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graffiti", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Graffiti = append(m.Graffiti[:0], dAtA[iNdEx:postIndex]...)
			if m.Graffiti == nil {
				m.Graffiti = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerSlashings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerSlashings = append(m.ProposerSlashings, &ProposerSlashing{})
			if err := m.ProposerSlashings[len(m.ProposerSlashings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttesterSlashings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttesterSlashings = append(m.AttesterSlashings, &AttesterSlashing{})
			if err := m.AttesterSlashings[len(m.AttesterSlashings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &Deposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoluntaryExits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoluntaryExits = append(m.VoluntaryExits, &SignedVoluntaryExit{})
			if err := m.VoluntaryExits[len(m.VoluntaryExits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncAggregate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncAggregate == nil {
				m.SyncAggregate = &SyncAggregate{}
			}
			if err := m.SyncAggregate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconBlockAltair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncAggregate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconBlockAltair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncAggregate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncAggregate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncCommitteeBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncCommitteeBits = append(m.SyncCommitteeBits[:0], dAtA[iNdEx:postIndex]...)
			if m.SyncCommitteeBits == nil {
				m.SyncCommitteeBits = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncCommitteeSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncCommitteeSignature = append(m.SyncCommitteeSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.SyncCommitteeSignature == nil {
				m.SyncCommitteeSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconBlockAltair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconBlockAltair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBeaconBlockAltair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBeaconBlockAltair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeaconBlockAltair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBeaconBlockAltair
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBeaconBlockAltair
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBeaconBlockAltair
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBeaconBlockAltair        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBeaconBlockAltair          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBeaconBlockAltair = fmt.Errorf("proto: unexpected end of group")
)
