// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1alpha1/sync_committee.proto

package eth

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_prysmaticlabs_eth2_types "github.com/prysmaticlabs/eth2-types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SyncCommitteeSignature struct {
	Slot                 github_com_prysmaticlabs_eth2_types.Slot           `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	BlockRoot            []byte                                             `protobuf:"bytes,2,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty" ssz-size:"32"`
	ValidatorIndex       github_com_prysmaticlabs_eth2_types.ValidatorIndex `protobuf:"varint,3,opt,name=validator_index,json=validatorIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.ValidatorIndex" json:"validator_index,omitempty"`
	Signature            []byte                                             `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *SyncCommitteeSignature) Reset()         { *m = SyncCommitteeSignature{} }
func (m *SyncCommitteeSignature) String() string { return proto.CompactTextString(m) }
func (*SyncCommitteeSignature) ProtoMessage()    {}
func (*SyncCommitteeSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9f2dddf8b20db1, []int{0}
}
func (m *SyncCommitteeSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCommitteeSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCommitteeSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCommitteeSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCommitteeSignature.Merge(m, src)
}
func (m *SyncCommitteeSignature) XXX_Size() int {
	return m.Size()
}
func (m *SyncCommitteeSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCommitteeSignature.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCommitteeSignature proto.InternalMessageInfo

func (m *SyncCommitteeSignature) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *SyncCommitteeSignature) GetBlockRoot() []byte {
	if m != nil {
		return m.BlockRoot
	}
	return nil
}

func (m *SyncCommitteeSignature) GetValidatorIndex() github_com_prysmaticlabs_eth2_types.ValidatorIndex {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *SyncCommitteeSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SyncCommitteeContribution struct {
	Slot                 github_com_prysmaticlabs_eth2_types.Slot `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	BlockRoot            []byte                                   `protobuf:"bytes,2,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty" ssz-size:"32"`
	SubcommitteeIndex    uint64                                   `protobuf:"varint,3,opt,name=subcommittee_index,json=subcommitteeIndex,proto3" json:"subcommittee_index,omitempty"`
	AggregationBits      []byte                                   `protobuf:"bytes,4,opt,name=aggregation_bits,json=aggregationBits,proto3" json:"aggregation_bits,omitempty" ssz-size:"32"`
	Signature            []byte                                   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *SyncCommitteeContribution) Reset()         { *m = SyncCommitteeContribution{} }
func (m *SyncCommitteeContribution) String() string { return proto.CompactTextString(m) }
func (*SyncCommitteeContribution) ProtoMessage()    {}
func (*SyncCommitteeContribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9f2dddf8b20db1, []int{1}
}
func (m *SyncCommitteeContribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCommitteeContribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCommitteeContribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCommitteeContribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCommitteeContribution.Merge(m, src)
}
func (m *SyncCommitteeContribution) XXX_Size() int {
	return m.Size()
}
func (m *SyncCommitteeContribution) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCommitteeContribution.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCommitteeContribution proto.InternalMessageInfo

func (m *SyncCommitteeContribution) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *SyncCommitteeContribution) GetBlockRoot() []byte {
	if m != nil {
		return m.BlockRoot
	}
	return nil
}

func (m *SyncCommitteeContribution) GetSubcommitteeIndex() uint64 {
	if m != nil {
		return m.SubcommitteeIndex
	}
	return 0
}

func (m *SyncCommitteeContribution) GetAggregationBits() []byte {
	if m != nil {
		return m.AggregationBits
	}
	return nil
}

func (m *SyncCommitteeContribution) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ContributionAndProof struct {
	AggregatorIndex      github_com_prysmaticlabs_eth2_types.ValidatorIndex `protobuf:"varint,1,opt,name=aggregator_index,json=aggregatorIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.ValidatorIndex" json:"aggregator_index,omitempty"`
	Contribution         *SyncCommitteeContribution                         `protobuf:"bytes,2,opt,name=contribution,proto3" json:"contribution,omitempty"`
	SelectionProof       []byte                                             `protobuf:"bytes,3,opt,name=selection_proof,json=selectionProof,proto3" json:"selection_proof,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *ContributionAndProof) Reset()         { *m = ContributionAndProof{} }
func (m *ContributionAndProof) String() string { return proto.CompactTextString(m) }
func (*ContributionAndProof) ProtoMessage()    {}
func (*ContributionAndProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9f2dddf8b20db1, []int{2}
}
func (m *ContributionAndProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContributionAndProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContributionAndProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContributionAndProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContributionAndProof.Merge(m, src)
}
func (m *ContributionAndProof) XXX_Size() int {
	return m.Size()
}
func (m *ContributionAndProof) XXX_DiscardUnknown() {
	xxx_messageInfo_ContributionAndProof.DiscardUnknown(m)
}

var xxx_messageInfo_ContributionAndProof proto.InternalMessageInfo

func (m *ContributionAndProof) GetAggregatorIndex() github_com_prysmaticlabs_eth2_types.ValidatorIndex {
	if m != nil {
		return m.AggregatorIndex
	}
	return 0
}

func (m *ContributionAndProof) GetContribution() *SyncCommitteeContribution {
	if m != nil {
		return m.Contribution
	}
	return nil
}

func (m *ContributionAndProof) GetSelectionProof() []byte {
	if m != nil {
		return m.SelectionProof
	}
	return nil
}

type SignedContributionAndProof struct {
	Message              *ContributionAndProof `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature            []byte                `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SignedContributionAndProof) Reset()         { *m = SignedContributionAndProof{} }
func (m *SignedContributionAndProof) String() string { return proto.CompactTextString(m) }
func (*SignedContributionAndProof) ProtoMessage()    {}
func (*SignedContributionAndProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c9f2dddf8b20db1, []int{3}
}
func (m *SignedContributionAndProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedContributionAndProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedContributionAndProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedContributionAndProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedContributionAndProof.Merge(m, src)
}
func (m *SignedContributionAndProof) XXX_Size() int {
	return m.Size()
}
func (m *SignedContributionAndProof) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedContributionAndProof.DiscardUnknown(m)
}

var xxx_messageInfo_SignedContributionAndProof proto.InternalMessageInfo

func (m *SignedContributionAndProof) GetMessage() *ContributionAndProof {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignedContributionAndProof) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*SyncCommitteeSignature)(nil), "ethereum.eth.v1alpha1.SyncCommitteeSignature")
	proto.RegisterType((*SyncCommitteeContribution)(nil), "ethereum.eth.v1alpha1.SyncCommitteeContribution")
	proto.RegisterType((*ContributionAndProof)(nil), "ethereum.eth.v1alpha1.ContributionAndProof")
	proto.RegisterType((*SignedContributionAndProof)(nil), "ethereum.eth.v1alpha1.SignedContributionAndProof")
}

func init() { proto.RegisterFile("eth/v1alpha1/sync_committee.proto", fileDescriptor_9c9f2dddf8b20db1) }

var fileDescriptor_9c9f2dddf8b20db1 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x75, 0xa6, 0x80, 0x7a, 0x2d, 0x0d, 0xb5, 0x28, 0x4a, 0x3b, 0x24, 0xc5, 0x53, 0x24,
	0x88, 0xdd, 0xba, 0x52, 0x24, 0x0a, 0x03, 0xb8, 0xca, 0xc0, 0x16, 0x39, 0x88, 0x01, 0x55, 0xb2,
	0xce, 0xce, 0xd5, 0x3e, 0x61, 0xfb, 0xac, 0xbb, 0xe7, 0x88, 0xf4, 0x2b, 0xb0, 0x32, 0xb3, 0xb1,
	0x20, 0xf1, 0x3d, 0x10, 0x13, 0x9f, 0x20, 0x42, 0xf9, 0x08, 0x8c, 0x9d, 0x90, 0x2f, 0x72, 0x62,
	0x4b, 0x2e, 0x2a, 0x62, 0x60, 0xf3, 0x3b, 0xbf, 0xf7, 0xfe, 0xef, 0xfd, 0xde, 0xdd, 0xc3, 0x8f,
	0x28, 0x44, 0xd6, 0xf4, 0x98, 0xc4, 0x59, 0x44, 0x8e, 0x2d, 0x39, 0x4b, 0x03, 0x2f, 0xe0, 0x49,
	0xc2, 0x00, 0x28, 0x35, 0x33, 0xc1, 0x81, 0xeb, 0x7b, 0x14, 0x22, 0x2a, 0x68, 0x9e, 0x98, 0x14,
	0x22, 0xb3, 0xf4, 0x3d, 0xe8, 0x87, 0x0c, 0xa2, 0xdc, 0x37, 0x03, 0x9e, 0x58, 0x21, 0x0f, 0xb9,
	0xa5, 0xbc, 0xfd, 0xfc, 0x42, 0x59, 0xca, 0x50, 0x5f, 0xcb, 0x2c, 0xc6, 0x27, 0x0d, 0x3f, 0x1c,
	0xcf, 0xd2, 0xe0, 0xac, 0xcc, 0x3e, 0x66, 0x61, 0x4a, 0x20, 0x17, 0x54, 0x7f, 0x81, 0x37, 0x64,
	0xcc, 0xa1, 0x8d, 0x0e, 0x51, 0x6f, 0xc3, 0x79, 0x72, 0x35, 0xef, 0xf6, 0x2a, 0xb9, 0x33, 0x31,
	0x93, 0x09, 0x01, 0x16, 0xc4, 0xc4, 0x97, 0x16, 0x85, 0xc8, 0xee, 0xc3, 0x2c, 0xa3, 0xd2, 0x1c,
	0xc7, 0x1c, 0x5c, 0x15, 0xa9, 0x1f, 0x61, 0xec, 0xc7, 0x3c, 0x78, 0xe7, 0x09, 0xce, 0xa1, 0xad,
	0x1d, 0xa2, 0xde, 0xb6, 0xb3, 0xfb, 0x6b, 0xde, 0xbd, 0x27, 0xe5, 0x65, 0x5f, 0xb2, 0x4b, 0x7a,
	0x6a, 0x9c, 0xd8, 0x86, 0xbb, 0xa9, 0x9c, 0x5c, 0xce, 0x41, 0xf7, 0x70, 0x6b, 0x4a, 0x62, 0x36,
	0x21, 0xc0, 0x85, 0xc7, 0xd2, 0x09, 0x7d, 0xdf, 0xbe, 0xa5, 0xe4, 0x07, 0x57, 0xf3, 0xae, 0x7d,
	0x13, 0xf9, 0x37, 0x65, 0xf8, 0xab, 0x22, 0xda, 0xdd, 0x99, 0xd6, 0x6c, 0xdd, 0xc2, 0x9b, 0xb2,
	0xec, 0xb0, 0xbd, 0xd1, 0x54, 0xd1, 0xd3, 0x81, 0xe1, 0xae, 0x7d, 0x8c, 0xaf, 0x1a, 0xde, 0xaf,
	0x01, 0x3a, 0xe3, 0x29, 0x08, 0xe6, 0xe7, 0xc0, 0x78, 0xfa, 0x5f, 0x18, 0xf5, 0xb1, 0x2e, 0x73,
	0x7f, 0x75, 0x1d, 0xaa, 0x98, 0xdc, 0xdd, 0xea, 0x9f, 0x65, 0xc7, 0xcf, 0xf1, 0x7d, 0x12, 0x86,
	0x82, 0x86, 0xa4, 0xa8, 0xd8, 0xf3, 0x19, 0xc8, 0xe6, 0xc6, 0x0b, 0x99, 0x56, 0xc5, 0xd5, 0x61,
	0x20, 0xeb, 0xbc, 0x6e, 0xdf, 0x80, 0xd7, 0x07, 0x0d, 0x3f, 0xa8, 0x22, 0x7a, 0x99, 0x4e, 0x46,
	0x82, 0xf3, 0x0b, 0x9d, 0xac, 0xeb, 0x58, 0xcd, 0x16, 0xfd, 0xd3, 0x6c, 0x5b, 0xeb, 0x7c, 0xcb,
	0x56, 0x5f, 0xe3, 0xed, 0xa0, 0x22, 0xad, 0x68, 0x6e, 0xd9, 0x47, 0x66, 0xe3, 0x4b, 0x31, 0xaf,
	0x9d, 0xaa, 0x5b, 0xcb, 0xa2, 0x9f, 0xe2, 0x96, 0xa4, 0x31, 0x0d, 0x14, 0xbe, 0xac, 0xe8, 0x45,
	0xc1, 0x6e, 0x04, 0xb1, 0xb3, 0xf2, 0x54, 0x4d, 0x1b, 0x1f, 0x11, 0x3e, 0x28, 0x5e, 0x14, 0x9d,
	0x34, 0x32, 0x19, 0xe2, 0xbb, 0x09, 0x95, 0x92, 0x84, 0x54, 0xa1, 0xd8, 0xb2, 0x1f, 0x5f, 0x53,
	0x6b, 0x53, 0xb4, 0x5b, 0xc6, 0xfe, 0xf5, 0xa5, 0x76, 0x3e, 0xa3, 0x6f, 0x8b, 0x0e, 0xfa, 0xb1,
	0xe8, 0xa0, 0x9f, 0x8b, 0x0e, 0xc2, 0xfb, 0x5c, 0x84, 0xcd, 0xc2, 0x8e, 0x5e, 0xa3, 0x34, 0x2a,
	0x76, 0xc6, 0x08, 0xbd, 0x1d, 0xfc, 0x69, 0x5a, 0x2a, 0x0b, 0xc9, 0x98, 0x32, 0x56, 0x4b, 0xec,
	0x19, 0x85, 0xe8, 0x8b, 0xb6, 0x37, 0x2c, 0x55, 0x86, 0x15, 0x95, 0xef, 0xeb, 0xf3, 0xf3, 0x21,
	0x44, 0xe7, 0xe5, 0xb9, 0x7f, 0x47, 0x2d, 0xa9, 0x93, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfe,
	0x81, 0xf1, 0x83, 0x0f, 0x05, 0x00, 0x00,
}

func (m *SyncCommitteeSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCommitteeSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCommitteeSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSyncCommittee(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.ValidatorIndex != 0 {
		i = encodeVarintSyncCommittee(dAtA, i, uint64(m.ValidatorIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BlockRoot) > 0 {
		i -= len(m.BlockRoot)
		copy(dAtA[i:], m.BlockRoot)
		i = encodeVarintSyncCommittee(dAtA, i, uint64(len(m.BlockRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.Slot != 0 {
		i = encodeVarintSyncCommittee(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncCommitteeContribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCommitteeContribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCommitteeContribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSyncCommittee(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AggregationBits) > 0 {
		i -= len(m.AggregationBits)
		copy(dAtA[i:], m.AggregationBits)
		i = encodeVarintSyncCommittee(dAtA, i, uint64(len(m.AggregationBits)))
		i--
		dAtA[i] = 0x22
	}
	if m.SubcommitteeIndex != 0 {
		i = encodeVarintSyncCommittee(dAtA, i, uint64(m.SubcommitteeIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BlockRoot) > 0 {
		i -= len(m.BlockRoot)
		copy(dAtA[i:], m.BlockRoot)
		i = encodeVarintSyncCommittee(dAtA, i, uint64(len(m.BlockRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.Slot != 0 {
		i = encodeVarintSyncCommittee(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContributionAndProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContributionAndProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContributionAndProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SelectionProof) > 0 {
		i -= len(m.SelectionProof)
		copy(dAtA[i:], m.SelectionProof)
		i = encodeVarintSyncCommittee(dAtA, i, uint64(len(m.SelectionProof)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Contribution != nil {
		{
			size, err := m.Contribution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSyncCommittee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AggregatorIndex != 0 {
		i = encodeVarintSyncCommittee(dAtA, i, uint64(m.AggregatorIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedContributionAndProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedContributionAndProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedContributionAndProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSyncCommittee(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSyncCommittee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSyncCommittee(dAtA []byte, offset int, v uint64) int {
	offset -= sovSyncCommittee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SyncCommitteeSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovSyncCommittee(uint64(m.Slot))
	}
	l = len(m.BlockRoot)
	if l > 0 {
		n += 1 + l + sovSyncCommittee(uint64(l))
	}
	if m.ValidatorIndex != 0 {
		n += 1 + sovSyncCommittee(uint64(m.ValidatorIndex))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSyncCommittee(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncCommitteeContribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovSyncCommittee(uint64(m.Slot))
	}
	l = len(m.BlockRoot)
	if l > 0 {
		n += 1 + l + sovSyncCommittee(uint64(l))
	}
	if m.SubcommitteeIndex != 0 {
		n += 1 + sovSyncCommittee(uint64(m.SubcommitteeIndex))
	}
	l = len(m.AggregationBits)
	if l > 0 {
		n += 1 + l + sovSyncCommittee(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSyncCommittee(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContributionAndProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AggregatorIndex != 0 {
		n += 1 + sovSyncCommittee(uint64(m.AggregatorIndex))
	}
	if m.Contribution != nil {
		l = m.Contribution.Size()
		n += 1 + l + sovSyncCommittee(uint64(l))
	}
	l = len(m.SelectionProof)
	if l > 0 {
		n += 1 + l + sovSyncCommittee(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedContributionAndProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSyncCommittee(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSyncCommittee(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSyncCommittee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSyncCommittee(x uint64) (n int) {
	return sovSyncCommittee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SyncCommitteeSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncCommittee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCommitteeSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCommitteeSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockRoot = append(m.BlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockRoot == nil {
				m.BlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= github_com_prysmaticlabs_eth2_types.ValidatorIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncCommittee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCommitteeContribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncCommittee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCommitteeContribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCommitteeContribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockRoot = append(m.BlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockRoot == nil {
				m.BlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubcommitteeIndex", wireType)
			}
			m.SubcommitteeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubcommitteeIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationBits = append(m.AggregationBits[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregationBits == nil {
				m.AggregationBits = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncCommittee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContributionAndProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncCommittee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContributionAndProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContributionAndProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorIndex", wireType)
			}
			m.AggregatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregatorIndex |= github_com_prysmaticlabs_eth2_types.ValidatorIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contribution == nil {
				m.Contribution = &SyncCommitteeContribution{}
			}
			if err := m.Contribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectionProof = append(m.SelectionProof[:0], dAtA[iNdEx:postIndex]...)
			if m.SelectionProof == nil {
				m.SelectionProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncCommittee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedContributionAndProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSyncCommittee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedContributionAndProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedContributionAndProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &ContributionAndProof{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSyncCommittee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSyncCommittee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSyncCommittee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSyncCommittee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSyncCommittee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSyncCommittee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSyncCommittee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSyncCommittee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSyncCommittee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSyncCommittee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSyncCommittee = fmt.Errorf("proto: unexpected end of group")
)
