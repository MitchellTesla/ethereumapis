// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1alpha1/shard.proto

package eth

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DataCommitment struct {
	Point                []byte   `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty" ssz-size:"48"`
	Length               uint64   `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataCommitment) Reset()         { *m = DataCommitment{} }
func (m *DataCommitment) String() string { return proto.CompactTextString(m) }
func (*DataCommitment) ProtoMessage()    {}
func (*DataCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{0}
}
func (m *DataCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCommitment.Merge(m, src)
}
func (m *DataCommitment) XXX_Size() int {
	return m.Size()
}
func (m *DataCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_DataCommitment proto.InternalMessageInfo

func (m *DataCommitment) GetPoint() []byte {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *DataCommitment) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

type ShardHeader struct {
	Slot                 uint64          `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Shard                uint64          `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Commitment           *DataCommitment `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
	LengthProof          []byte          `protobuf:"bytes,4,opt,name=length_proof,json=lengthProof,proto3" json:"length_proof,omitempty" ssz-size:"48"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ShardHeader) Reset()         { *m = ShardHeader{} }
func (m *ShardHeader) String() string { return proto.CompactTextString(m) }
func (*ShardHeader) ProtoMessage()    {}
func (*ShardHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{1}
}
func (m *ShardHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardHeader.Merge(m, src)
}
func (m *ShardHeader) XXX_Size() int {
	return m.Size()
}
func (m *ShardHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ShardHeader proto.InternalMessageInfo

func (m *ShardHeader) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardHeader) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ShardHeader) GetCommitment() *DataCommitment {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *ShardHeader) GetLengthProof() []byte {
	if m != nil {
		return m.LengthProof
	}
	return nil
}

func init() {
	proto.RegisterType((*DataCommitment)(nil), "ethereum.eth.v1alpha1.DataCommitment")
	proto.RegisterType((*ShardHeader)(nil), "ethereum.eth.v1alpha1.ShardHeader")
}

func init() { proto.RegisterFile("eth/v1alpha1/shard.proto", fileDescriptor_5d9da510e571288b) }

var fileDescriptor_5d9da510e571288b = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x49, 0xdd, 0xf6, 0x90, 0x56, 0xc1, 0x60, 0x65, 0xf1, 0x50, 0xcb, 0x82, 0xd8, 0x4b,
	0x77, 0xa9, 0x16, 0x11, 0xbd, 0x55, 0x0b, 0x1e, 0x75, 0xbd, 0x89, 0x20, 0xd9, 0x36, 0xdd, 0x04,
	0x36, 0x4d, 0x48, 0xa6, 0x82, 0x7d, 0x24, 0xcf, 0x3e, 0x84, 0x47, 0x9f, 0x40, 0xa4, 0x8f, 0xe0,
	0x13, 0x48, 0x93, 0xb6, 0xac, 0xa0, 0xb7, 0xf9, 0xc8, 0x3f, 0xc3, 0x37, 0x13, 0x1c, 0x32, 0xe0,
	0xc9, 0x73, 0x8f, 0x16, 0x9a, 0xd3, 0x5e, 0x62, 0x39, 0x35, 0xe3, 0x58, 0x1b, 0x05, 0x8a, 0x34,
	0x19, 0x70, 0x66, 0xd8, 0x4c, 0xc6, 0x0c, 0x78, 0xbc, 0x8e, 0x1c, 0x74, 0x73, 0x01, 0x7c, 0x96,
	0xc5, 0x23, 0x25, 0x93, 0x5c, 0xe5, 0x2a, 0x71, 0xe9, 0x6c, 0x36, 0x71, 0xe4, 0xc0, 0x55, 0x7e,
	0x4a, 0x74, 0x87, 0x77, 0xae, 0x29, 0xd0, 0x2b, 0x25, 0xa5, 0x00, 0xc9, 0xa6, 0x40, 0x8e, 0x71,
	0x55, 0x2b, 0x31, 0x85, 0x10, 0xb5, 0x51, 0xa7, 0x31, 0xd8, 0xfd, 0xfe, 0x3c, 0xdc, 0xb6, 0x76,
	0xde, 0xb5, 0x62, 0xce, 0x2e, 0xa2, 0xfe, 0x79, 0x94, 0xfa, 0x77, 0xb2, 0x8f, 0x6b, 0x05, 0x9b,
	0xe6, 0xc0, 0xc3, 0x4a, 0x1b, 0x75, 0x82, 0x74, 0x45, 0xd1, 0x1b, 0xc2, 0xf5, 0xfb, 0xa5, 0xe8,
	0x0d, 0xa3, 0x63, 0x66, 0x08, 0xc1, 0x81, 0x2d, 0x94, 0x9f, 0x17, 0xa4, 0xae, 0x26, 0x7b, 0xb8,
	0xea, 0x76, 0x59, 0xb5, 0x7a, 0x20, 0x43, 0x8c, 0x47, 0x1b, 0x91, 0x70, 0xab, 0x8d, 0x3a, 0xf5,
	0x93, 0xa3, 0xf8, 0xcf, 0x3d, 0xe3, 0xdf, 0xd6, 0x69, 0xa9, 0x91, 0xf4, 0x71, 0xc3, 0xab, 0x3c,
	0x69, 0xa3, 0xd4, 0x24, 0x0c, 0xfe, 0x5b, 0xa4, 0xee, 0x63, 0xb7, 0xcb, 0xd4, 0xe0, 0xf1, 0x7d,
	0xd1, 0x42, 0x1f, 0x8b, 0x16, 0xfa, 0x5a, 0xb4, 0xd0, 0xc3, 0x59, 0xe9, 0x8c, 0xda, 0xbc, 0x58,
	0x49, 0x41, 0x8c, 0x0a, 0x9a, 0xd9, 0x64, 0xad, 0x43, 0xb5, 0x70, 0xb0, 0xf9, 0x9d, 0x4b, 0x06,
	0xfc, 0xb5, 0xd2, 0x1c, 0xae, 0x75, 0x87, 0x25, 0xdd, 0xac, 0xe6, 0xce, 0x7d, 0xfa, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x89, 0x31, 0xc3, 0xa1, 0xd0, 0x01, 0x00, 0x00,
}

func (m *DataCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Length != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Point) > 0 {
		i -= len(m.Point)
		copy(dAtA[i:], m.Point)
		i = encodeVarintShard(dAtA, i, uint64(len(m.Point)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LengthProof) > 0 {
		i -= len(m.LengthProof)
		copy(dAtA[i:], m.LengthProof)
		i = encodeVarintShard(dAtA, i, uint64(len(m.LengthProof)))
		i--
		dAtA[i] = 0x22
	}
	if m.Commitment != nil {
		{
			size, err := m.Commitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Shard != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShard(dAtA []byte, offset int, v uint64) int {
	offset -= sovShard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Point)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovShard(uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovShard(uint64(m.Slot))
	}
	if m.Shard != 0 {
		n += 1 + sovShard(uint64(m.Shard))
	}
	if m.Commitment != nil {
		l = m.Commitment.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.LengthProof)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovShard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShard(x uint64) (n int) {
	return sovShard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Point = append(m.Point[:0], dAtA[iNdEx:postIndex]...)
			if m.Point == nil {
				m.Point = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commitment == nil {
				m.Commitment = &DataCommitment{}
			}
			if err := m.Commitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LengthProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LengthProof = append(m.LengthProof[:0], dAtA[iNdEx:postIndex]...)
			if m.LengthProof == nil {
				m.LengthProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShard = fmt.Errorf("proto: unexpected end of group")
)
