// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1alpha1/shard.proto

package eth

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_prysmaticlabs_eth2_types "github.com/prysmaticlabs/eth2-types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DataCommitment struct {
	Point                []byte   `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty" ssz-size:"48"`
	Length               uint64   `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataCommitment) Reset()         { *m = DataCommitment{} }
func (m *DataCommitment) String() string { return proto.CompactTextString(m) }
func (*DataCommitment) ProtoMessage()    {}
func (*DataCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{0}
}
func (m *DataCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCommitment.Merge(m, src)
}
func (m *DataCommitment) XXX_Size() int {
	return m.Size()
}
func (m *DataCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_DataCommitment proto.InternalMessageInfo

func (m *DataCommitment) GetPoint() []byte {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *DataCommitment) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

type ShardBlobBodySummary struct {
	Commitment           *DataCommitment `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	DegreeProof          []byte          `protobuf:"bytes,2,opt,name=degree_proof,json=degreeProof,proto3" json:"degree_proof,omitempty" ssz-size:"48"`
	DataRoot             []byte          `protobuf:"bytes,3,opt,name=data_root,json=dataRoot,proto3" json:"data_root,omitempty" ssz-size:"32"`
	BeaconBlockRoot      []byte          `protobuf:"bytes,4,opt,name=beacon_block_root,json=beaconBlockRoot,proto3" json:"beacon_block_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ShardBlobBodySummary) Reset()         { *m = ShardBlobBodySummary{} }
func (m *ShardBlobBodySummary) String() string { return proto.CompactTextString(m) }
func (*ShardBlobBodySummary) ProtoMessage()    {}
func (*ShardBlobBodySummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{1}
}
func (m *ShardBlobBodySummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlobBodySummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlobBodySummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlobBodySummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlobBodySummary.Merge(m, src)
}
func (m *ShardBlobBodySummary) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlobBodySummary) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlobBodySummary.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlobBodySummary proto.InternalMessageInfo

func (m *ShardBlobBodySummary) GetCommitment() *DataCommitment {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *ShardBlobBodySummary) GetDegreeProof() []byte {
	if m != nil {
		return m.DegreeProof
	}
	return nil
}

func (m *ShardBlobBodySummary) GetDataRoot() []byte {
	if m != nil {
		return m.DataRoot
	}
	return nil
}

func (m *ShardBlobBodySummary) GetBeaconBlockRoot() []byte {
	if m != nil {
		return m.BeaconBlockRoot
	}
	return nil
}

type ShardBlobHeader struct {
	Slot                 github_com_prysmaticlabs_eth2_types.Slot           `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	Shard                uint64                                             `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	BodySummary          *ShardBlobBodySummary                              `protobuf:"bytes,3,opt,name=body_summary,json=bodySummary,proto3" json:"body_summary,omitempty"`
	ProposerIndex        github_com_prysmaticlabs_eth2_types.ValidatorIndex `protobuf:"varint,4,opt,name=proposer_index,json=proposerIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.ValidatorIndex" json:"proposer_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *ShardBlobHeader) Reset()         { *m = ShardBlobHeader{} }
func (m *ShardBlobHeader) String() string { return proto.CompactTextString(m) }
func (*ShardBlobHeader) ProtoMessage()    {}
func (*ShardBlobHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{2}
}
func (m *ShardBlobHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlobHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlobHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlobHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlobHeader.Merge(m, src)
}
func (m *ShardBlobHeader) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlobHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlobHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlobHeader proto.InternalMessageInfo

func (m *ShardBlobHeader) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardBlobHeader) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ShardBlobHeader) GetBodySummary() *ShardBlobBodySummary {
	if m != nil {
		return m.BodySummary
	}
	return nil
}

func (m *ShardBlobHeader) GetProposerIndex() github_com_prysmaticlabs_eth2_types.ValidatorIndex {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

type SignedShardBlobHeader struct {
	Message              *ShardBlobHeader `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature            []byte           `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SignedShardBlobHeader) Reset()         { *m = SignedShardBlobHeader{} }
func (m *SignedShardBlobHeader) String() string { return proto.CompactTextString(m) }
func (*SignedShardBlobHeader) ProtoMessage()    {}
func (*SignedShardBlobHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{3}
}
func (m *SignedShardBlobHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedShardBlobHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedShardBlobHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedShardBlobHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedShardBlobHeader.Merge(m, src)
}
func (m *SignedShardBlobHeader) XXX_Size() int {
	return m.Size()
}
func (m *SignedShardBlobHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedShardBlobHeader.DiscardUnknown(m)
}

var xxx_messageInfo_SignedShardBlobHeader proto.InternalMessageInfo

func (m *SignedShardBlobHeader) GetMessage() *ShardBlobHeader {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignedShardBlobHeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ShardBlobReference struct {
	Slot                 github_com_prysmaticlabs_eth2_types.Slot           `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	Shard                uint64                                             `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	BodyRoot             []byte                                             `protobuf:"bytes,3,opt,name=body_root,json=bodyRoot,proto3" json:"body_root,omitempty" ssz-size:"32"`
	ProposerIndex        github_com_prysmaticlabs_eth2_types.ValidatorIndex `protobuf:"varint,4,opt,name=proposer_index,json=proposerIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.ValidatorIndex" json:"proposer_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *ShardBlobReference) Reset()         { *m = ShardBlobReference{} }
func (m *ShardBlobReference) String() string { return proto.CompactTextString(m) }
func (*ShardBlobReference) ProtoMessage()    {}
func (*ShardBlobReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{4}
}
func (m *ShardBlobReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlobReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlobReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlobReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlobReference.Merge(m, src)
}
func (m *ShardBlobReference) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlobReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlobReference.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlobReference proto.InternalMessageInfo

func (m *ShardBlobReference) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardBlobReference) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ShardBlobReference) GetBodyRoot() []byte {
	if m != nil {
		return m.BodyRoot
	}
	return nil
}

func (m *ShardBlobReference) GetProposerIndex() github_com_prysmaticlabs_eth2_types.ValidatorIndex {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

type SignedShardBlobReference struct {
	Message              *ShardBlobReference `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature            []byte              `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SignedShardBlobReference) Reset()         { *m = SignedShardBlobReference{} }
func (m *SignedShardBlobReference) String() string { return proto.CompactTextString(m) }
func (*SignedShardBlobReference) ProtoMessage()    {}
func (*SignedShardBlobReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{5}
}
func (m *SignedShardBlobReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedShardBlobReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedShardBlobReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedShardBlobReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedShardBlobReference.Merge(m, src)
}
func (m *SignedShardBlobReference) XXX_Size() int {
	return m.Size()
}
func (m *SignedShardBlobReference) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedShardBlobReference.DiscardUnknown(m)
}

var xxx_messageInfo_SignedShardBlobReference proto.InternalMessageInfo

func (m *SignedShardBlobReference) GetMessage() *ShardBlobReference {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignedShardBlobReference) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ShardProposerSlashing struct {
	SignedReference_1    *SignedShardBlobReference `protobuf:"bytes,1,opt,name=signed_reference_1,json=signedReference1,proto3" json:"signed_reference_1,omitempty"`
	SignedReference_2    *SignedShardBlobReference `protobuf:"bytes,2,opt,name=signed_reference_2,json=signedReference2,proto3" json:"signed_reference_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ShardProposerSlashing) Reset()         { *m = ShardProposerSlashing{} }
func (m *ShardProposerSlashing) String() string { return proto.CompactTextString(m) }
func (*ShardProposerSlashing) ProtoMessage()    {}
func (*ShardProposerSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{6}
}
func (m *ShardProposerSlashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardProposerSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardProposerSlashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardProposerSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardProposerSlashing.Merge(m, src)
}
func (m *ShardProposerSlashing) XXX_Size() int {
	return m.Size()
}
func (m *ShardProposerSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardProposerSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_ShardProposerSlashing proto.InternalMessageInfo

func (m *ShardProposerSlashing) GetSignedReference_1() *SignedShardBlobReference {
	if m != nil {
		return m.SignedReference_1
	}
	return nil
}

func (m *ShardProposerSlashing) GetSignedReference_2() *SignedShardBlobReference {
	if m != nil {
		return m.SignedReference_2
	}
	return nil
}

func init() {
	proto.RegisterType((*DataCommitment)(nil), "ethereum.eth.v1alpha1.DataCommitment")
	proto.RegisterType((*ShardBlobBodySummary)(nil), "ethereum.eth.v1alpha1.ShardBlobBodySummary")
	proto.RegisterType((*ShardBlobHeader)(nil), "ethereum.eth.v1alpha1.ShardBlobHeader")
	proto.RegisterType((*SignedShardBlobHeader)(nil), "ethereum.eth.v1alpha1.SignedShardBlobHeader")
	proto.RegisterType((*ShardBlobReference)(nil), "ethereum.eth.v1alpha1.ShardBlobReference")
	proto.RegisterType((*SignedShardBlobReference)(nil), "ethereum.eth.v1alpha1.SignedShardBlobReference")
	proto.RegisterType((*ShardProposerSlashing)(nil), "ethereum.eth.v1alpha1.ShardProposerSlashing")
}

func init() { proto.RegisterFile("eth/v1alpha1/shard.proto", fileDescriptor_5d9da510e571288b) }

var fileDescriptor_5d9da510e571288b = []byte{
	// 623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0xf3, 0xa5, 0xfd, 0xe8, 0xa4, 0x3f, 0x74, 0xd4, 0xa2, 0x88, 0x45, 0x5b, 0x59, 0x02,
	0x8a, 0xa0, 0xb6, 0xe2, 0x56, 0x11, 0x3f, 0x42, 0x42, 0x2e, 0x91, 0x60, 0x83, 0xca, 0x44, 0x62,
	0x81, 0xa8, 0xac, 0xb1, 0x7d, 0x63, 0x5b, 0xd8, 0x1e, 0x6b, 0x66, 0x82, 0x48, 0x97, 0x2c, 0x59,
	0xb1, 0xe4, 0x19, 0x78, 0x12, 0x96, 0x6c, 0xd8, 0x46, 0x28, 0x8f, 0xc0, 0xb2, 0x6c, 0x90, 0xc7,
	0x89, 0x1b, 0x8a, 0x43, 0x90, 0xa0, 0xbb, 0xdc, 0xf8, 0x9c, 0x73, 0xcf, 0xbd, 0xe7, 0x6a, 0x50,
	0x13, 0x64, 0x68, 0xbe, 0x6e, 0xd1, 0x38, 0x0b, 0x69, 0xcb, 0x14, 0x21, 0xe5, 0xbe, 0x91, 0x71,
	0x26, 0x19, 0xde, 0x04, 0x19, 0x02, 0x87, 0x7e, 0x62, 0x80, 0x0c, 0x8d, 0x09, 0xe4, 0xea, 0x5e,
	0x10, 0xc9, 0xb0, 0xef, 0x1a, 0x1e, 0x4b, 0xcc, 0x80, 0x05, 0xcc, 0x54, 0x68, 0xb7, 0xdf, 0x53,
	0x95, 0x2a, 0xd4, 0xaf, 0x42, 0x45, 0x7f, 0x86, 0x56, 0x1f, 0x51, 0x49, 0x0f, 0x59, 0x92, 0x44,
	0x32, 0x81, 0x54, 0xe2, 0x1b, 0x68, 0x21, 0x63, 0x51, 0x2a, 0x9b, 0xda, 0x8e, 0xb6, 0xbb, 0x6c,
	0xaf, 0x7f, 0x1b, 0x6e, 0xaf, 0x08, 0x71, 0xb2, 0x27, 0xa2, 0x13, 0xb8, 0xa7, 0x1f, 0xdc, 0xd1,
	0x49, 0xf1, 0x1d, 0x5f, 0x41, 0x8b, 0x31, 0xa4, 0x81, 0x0c, 0x9b, 0xb5, 0x1d, 0x6d, 0xb7, 0x4e,
	0xc6, 0x95, 0xfe, 0xb6, 0x86, 0x36, 0xba, 0xb9, 0x51, 0x3b, 0x66, 0xae, 0xcd, 0xfc, 0x41, 0xb7,
	0x9f, 0x24, 0x94, 0x0f, 0x70, 0x07, 0x21, 0xaf, 0xec, 0xa3, 0xe4, 0x1b, 0xd6, 0x35, 0xa3, 0x72,
	0x0c, 0xe3, 0x67, 0x53, 0x64, 0x8a, 0x88, 0x0f, 0xd0, 0xb2, 0x0f, 0x01, 0x07, 0x70, 0x32, 0xce,
	0x58, 0x4f, 0x75, 0xaf, 0xf4, 0xd9, 0x28, 0x60, 0x47, 0x39, 0x0a, 0x1b, 0x68, 0xc9, 0xa7, 0x92,
	0x3a, 0x9c, 0x31, 0xd9, 0xfc, 0xaf, 0x8a, 0xb2, 0x6f, 0xe9, 0xe4, 0x52, 0x8e, 0x21, 0x8c, 0x49,
	0xfc, 0x00, 0xad, 0xbb, 0x40, 0x3d, 0x96, 0x3a, 0x6e, 0xcc, 0xbc, 0x57, 0x05, 0xaf, 0x3e, 0x8b,
	0xb7, 0x56, 0x60, 0xed, 0x1c, 0x9a, 0xd3, 0xf5, 0x0f, 0x35, 0xb4, 0x56, 0x2e, 0xe1, 0x31, 0x50,
	0x1f, 0x38, 0x7e, 0x88, 0xea, 0x22, 0x66, 0xc5, 0xe4, 0x75, 0xfb, 0xf6, 0xe9, 0x70, 0x7b, 0x77,
	0x2a, 0xac, 0x8c, 0x0f, 0x44, 0x42, 0x65, 0xe4, 0xc5, 0xd4, 0x15, 0x26, 0xc8, 0xd0, 0xda, 0x93,
	0x83, 0x0c, 0x84, 0xd1, 0x8d, 0x99, 0x24, 0x8a, 0x89, 0x37, 0xd0, 0x82, 0x3a, 0x81, 0xf1, 0xc6,
	0x8b, 0x02, 0x3f, 0x45, 0xcb, 0x2e, 0xf3, 0x07, 0x8e, 0x28, 0xf6, 0xac, 0xa6, 0x6b, 0x58, 0xb7,
	0x66, 0x6c, 0xb6, 0x2a, 0x1a, 0xd2, 0x70, 0xa7, 0x72, 0x3a, 0x46, 0xab, 0x19, 0x67, 0x19, 0x13,
	0xc0, 0x9d, 0x28, 0xf5, 0xe1, 0x8d, 0x9a, 0xbb, 0x6e, 0xb7, 0x4f, 0x87, 0xdb, 0xd6, 0x9f, 0x38,
	0x7e, 0x4e, 0xe3, 0xc8, 0xa7, 0x92, 0xf1, 0x27, 0x39, 0x9b, 0xac, 0x4c, 0xd4, 0x54, 0xa9, 0xbf,
	0xd3, 0xd0, 0x66, 0x37, 0x0a, 0x52, 0xf0, 0x7f, 0x5d, 0xd0, 0xff, 0x09, 0x08, 0x41, 0x03, 0x18,
	0x5f, 0xc7, 0xf5, 0x79, 0x33, 0x14, 0x44, 0x32, 0xa1, 0x61, 0x13, 0x2d, 0x89, 0x28, 0x48, 0xa9,
	0xec, 0x73, 0xa8, 0x3e, 0x8c, 0xbb, 0x6d, 0x9d, 0x9c, 0x61, 0xf4, 0xef, 0x1a, 0xc2, 0xa5, 0x1a,
	0x81, 0x1e, 0x70, 0x48, 0x3d, 0xb8, 0xb0, 0xa8, 0x0c, 0xb4, 0xa4, 0xa2, 0x9a, 0x73, 0x85, 0x39,
	0x46, 0x5d, 0xe1, 0x05, 0x47, 0xf1, 0x5e, 0x43, 0xcd, 0x73, 0x51, 0x9c, 0xed, 0xe0, 0xf0, 0x7c,
	0x1a, 0x37, 0xe7, 0xa5, 0x51, 0x72, 0xff, 0x22, 0x90, 0x2f, 0xf9, 0x75, 0xe4, 0x82, 0x47, 0x63,
	0xa7, 0xdd, 0x98, 0x8a, 0x30, 0x4a, 0x03, 0x7c, 0x8c, 0xb0, 0x50, 0x5e, 0x1d, 0x3e, 0xe9, 0xe3,
	0xb4, 0xc6, 0xd6, 0xcc, 0x59, 0xd6, 0x66, 0x0c, 0x47, 0x2e, 0x17, 0x52, 0xe5, 0x1f, 0xad, 0x4a,
	0x79, 0x4b, 0x59, 0xfe, 0x07, 0xf2, 0x96, 0xfd, 0xf2, 0xd3, 0x68, 0x4b, 0xfb, 0x3c, 0xda, 0xd2,
	0xbe, 0x8e, 0xb6, 0xb4, 0x17, 0xed, 0xdf, 0x65, 0xa7, 0x1a, 0xd1, 0x2c, 0x52, 0x45, 0xf9, 0xf8,
	0xdf, 0x07, 0x19, 0x7e, 0xac, 0x6d, 0x76, 0x26, 0x46, 0x3a, 0x53, 0x46, 0xdc, 0x45, 0xf5, 0x9a,
	0xef, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xa0, 0x0f, 0x18, 0x2f, 0x06, 0x00, 0x00,
}

func (m *DataCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Length != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Point) > 0 {
		i -= len(m.Point)
		copy(dAtA[i:], m.Point)
		i = encodeVarintShard(dAtA, i, uint64(len(m.Point)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardBlobBodySummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlobBodySummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardBlobBodySummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BeaconBlockRoot) > 0 {
		i -= len(m.BeaconBlockRoot)
		copy(dAtA[i:], m.BeaconBlockRoot)
		i = encodeVarintShard(dAtA, i, uint64(len(m.BeaconBlockRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataRoot) > 0 {
		i -= len(m.DataRoot)
		copy(dAtA[i:], m.DataRoot)
		i = encodeVarintShard(dAtA, i, uint64(len(m.DataRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DegreeProof) > 0 {
		i -= len(m.DegreeProof)
		copy(dAtA[i:], m.DegreeProof)
		i = encodeVarintShard(dAtA, i, uint64(len(m.DegreeProof)))
		i--
		dAtA[i] = 0x12
	}
	if m.Commitment != nil {
		{
			size, err := m.Commitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardBlobHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlobHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardBlobHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProposerIndex != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.ProposerIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.BodySummary != nil {
		{
			size, err := m.BodySummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Shard != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedShardBlobHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedShardBlobHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedShardBlobHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintShard(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardBlobReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlobReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardBlobReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProposerIndex != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.ProposerIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BodyRoot) > 0 {
		i -= len(m.BodyRoot)
		copy(dAtA[i:], m.BodyRoot)
		i = encodeVarintShard(dAtA, i, uint64(len(m.BodyRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Shard != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintShard(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedShardBlobReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedShardBlobReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedShardBlobReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintShard(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardProposerSlashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardProposerSlashing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardProposerSlashing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SignedReference_2 != nil {
		{
			size, err := m.SignedReference_2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SignedReference_1 != nil {
		{
			size, err := m.SignedReference_1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintShard(dAtA []byte, offset int, v uint64) int {
	offset -= sovShard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Point)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovShard(uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardBlobBodySummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commitment != nil {
		l = m.Commitment.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.DegreeProof)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.DataRoot)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.BeaconBlockRoot)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardBlobHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovShard(uint64(m.Slot))
	}
	if m.Shard != 0 {
		n += 1 + sovShard(uint64(m.Shard))
	}
	if m.BodySummary != nil {
		l = m.BodySummary.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	if m.ProposerIndex != 0 {
		n += 1 + sovShard(uint64(m.ProposerIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedShardBlobHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardBlobReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovShard(uint64(m.Slot))
	}
	if m.Shard != 0 {
		n += 1 + sovShard(uint64(m.Shard))
	}
	l = len(m.BodyRoot)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.ProposerIndex != 0 {
		n += 1 + sovShard(uint64(m.ProposerIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedShardBlobReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardProposerSlashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignedReference_1 != nil {
		l = m.SignedReference_1.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	if m.SignedReference_2 != nil {
		l = m.SignedReference_2.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovShard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShard(x uint64) (n int) {
	return sovShard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Point = append(m.Point[:0], dAtA[iNdEx:postIndex]...)
			if m.Point == nil {
				m.Point = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardBlobBodySummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlobBodySummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlobBodySummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commitment == nil {
				m.Commitment = &DataCommitment{}
			}
			if err := m.Commitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegreeProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegreeProof = append(m.DegreeProof[:0], dAtA[iNdEx:postIndex]...)
			if m.DegreeProof == nil {
				m.DegreeProof = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRoot = append(m.DataRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.DataRoot == nil {
				m.DataRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconBlockRoot = append(m.BeaconBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconBlockRoot == nil {
				m.BeaconBlockRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardBlobHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlobHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlobHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodySummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BodySummary == nil {
				m.BodySummary = &ShardBlobBodySummary{}
			}
			if err := m.BodySummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerIndex", wireType)
			}
			m.ProposerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerIndex |= github_com_prysmaticlabs_eth2_types.ValidatorIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedShardBlobHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedShardBlobHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedShardBlobHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &ShardBlobHeader{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardBlobReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlobReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlobReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyRoot = append(m.BodyRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyRoot == nil {
				m.BodyRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerIndex", wireType)
			}
			m.ProposerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerIndex |= github_com_prysmaticlabs_eth2_types.ValidatorIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedShardBlobReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedShardBlobReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedShardBlobReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &ShardBlobReference{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardProposerSlashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardProposerSlashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardProposerSlashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedReference_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignedReference_1 == nil {
				m.SignedReference_1 = &SignedShardBlobReference{}
			}
			if err := m.SignedReference_1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedReference_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignedReference_2 == nil {
				m.SignedReference_2 = &SignedShardBlobReference{}
			}
			if err := m.SignedReference_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShard = fmt.Errorf("proto: unexpected end of group")
)
